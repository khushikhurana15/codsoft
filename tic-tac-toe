import math

# Function to print the Tic-Tac-Toe board
def print_board(board):
    print('-------------')
    print('| ' + board[0] + ' | ' + board[1] + ' | ' + board[2] + ' |')
    print('-------------')
    print('| ' + board[3] + ' | ' + board[4] + ' | ' + board[5] + ' |')
    print('-------------')
    print('| ' + board[6] + ' | ' + board[7] + ' | ' + board[8] + ' |')
    print('-------------')

# Function to check if the game is over
def game_over(board):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if (board[i*3] != ' ' and
            board[i*3] == board[i*3 + 1] == board[i*3 + 2]):
            return board[i*3]
        if (board[i] != ' ' and
            board[i] == board[i + 3] == board[i + 6]):
            return board[i]
    if (board[0] != ' ' and
        board[0] == board[4] == board[8]):
        return board[0]
    if (board[2] != ' ' and
        board[2] == board[4] == board[6]):
        return board[2]
    # Check if the board is full (draw)
    if all(cell != ' ' for cell in board):
        return 'draw'
    return None

# Minimax algorithm with Alpha-Beta pruning
def minimax(board, depth, alpha, beta, maximizing_player):
    result = game_over(board)
    
    if result is not None:
        if result == 'X':
            return 1
        elif result == 'O':
            return -1
        else:
            return 0
    
    if maximizing_player:
        max_eval = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                eval = minimax(board, depth + 1, alpha, beta, False)
                board[i] = ' '
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                eval = minimax(board, depth + 1, alpha, beta, True)
                board[i] = ' '
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

# Function to get the best move for AI (using Minimax with Alpha-Beta pruning)
def get_best_move(board):
    best_move = -1
    best_eval = -math.inf
    alpha = -math.inf
    beta = math.inf
    
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'X'
            eval = minimax(board, 0, alpha, beta, False)
            board[i] = ' '
            if eval > best_eval:
                best_eval = eval
                best_move = i
    
    return best_move

# Function to play the game
def play_game():
    board = [' '] * 9
    current_turn = 'X'
    
    while True:
        print_board(board)
        
        if current_turn == 'X':
            # AI's turn
            move = get_best_move(board)
            board[move] = 'X'
            current_turn = 'O'
        else:
            # Human's turn
            while True:
                try:
                    move = int(input('Enter your move (0-8): '))
                    if 0 <= move <= 8 and board[move] == ' ':
                        board[move] = 'O'
                        break
                    else:
                        print('Invalid move. Try again.')
                except ValueError:
                    print('Invalid input. Please enter a number (0-8).')
            current_turn = 'X'
        
        # Check if game is over
        result = game_over(board)
        if result is not None:
            print_board(board)
            if result == 'draw':
                print("It's a draw!")
            else:
                print(result + " wins!")
            break

# Entry point to start the game
if __name__ == "__main__":
    play_game()
